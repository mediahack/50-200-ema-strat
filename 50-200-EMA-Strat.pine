// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© mediahack

//@version=4
strategy("Scratch pad", overlay=true, calc_on_order_fills=true)

// Global vars available from candle to candle
var float i_accountBalance = input(100.00, "Account Balance")
var float accountBalance = i_accountBalance
var crossType = array.new_int(0)
var int crossCount = 0
var currentCrossoverDead = false // this is important because if its dead we want to skip any checks until the next cross over.
var isLong = false
var isShort = false
var entry = 0.0
var profit = 0.0
var loss = 0.0
var qty = 100
var activeTrade = false
var labelUp = false // for alternating labels on trades
var wickedCount = 0

// Debugging
var showTradeLabels = true
var showTradeLines = false
var start = timestamp(2021, 4, 28, 0, 0, 0)

// Vars that change per candle
src = close
atr = atr(14) 
ema50 = ema(src, 50)
ema200 = ema(src, 200)
bullish = open < close
bearish = open > close 


// Lets start our testing. 

// CROSSOVERS ==================================================================
if crossover(ema50, ema200)
    array.push(crossType, 1)
    crossCount := crossCount+1
    currentCrossoverDead := false
    wickedCount := 0

if crossunder(ema50, ema200)
    array.push(crossType, 0)
    crossCount := crossCount+1
    currentCrossoverDead := false
    wickedCount := 0

// Draw'em!
plot(ema50, title="ema 50", color=color.yellow)
plot(crossover(ema50, ema200) ? ema200 : na, title="Golden Cross", style=plot.style_cross, color=color.green, linewidth=5, transp=0, display=display.all)

plot(ema200, title="ema 200", color=color.white)
plot(crossunder(ema50, ema200) ? ema200 : na, title='Death Cross', style=plot.style_cross, color=color.red, linewidth=5, transp=15)

// Methods =====================================================================
printsOnEma(ema) =>
    prints = false

    if bullish
        if open <= ema and close >= ema
            prints := true

    if bearish
        if open >= ema and close <= ema
            prints := true

    prints    

didWick(ema) =>
    wicked = false

    // bullish wick down
    if bullish and open >= ema and low <= ema
        wicked := true
    // bullish wick up
    if bullish and close <= ema and high >= ema
        wicked := true
    // bearish wick down
    if bearish and close > ema and low < ema
        wicked := true
    // bearish wick up
    if bearish and open < ema and high > ema
        wicked := true

    wicked

drawTradeLines() =>
    if showTradeLines 
        line.new(x1=bar_index[1], x2=bar_index, y1=loss, y2=loss, color=color.red, width=2)
        line.new(x1=bar_index[1], x2=bar_index, y1=entry, y2=entry, color=color.blue, width=2)
        line.new(x1=bar_index[1], x2=bar_index, y1=profit, y2=profit, color=color.green, width=2)
        
drawTradeLabel(dir) =>    
    content = dir + "\nATR: " + tostring(atr) + "\nEntry: " + tostring(entry) + "\nTP: "+ tostring(profit) + "\nSL: " + tostring(loss)
    details = label.new(bar_index, na)
    label.set_text(details, content)
    label.set_yloc(details, labelUp ? yloc.belowbar : yloc.abovebar)
    label.set_color(details, color.green)
    label.set_style(details, labelUp ? label.style_label_up : label.style_label_down)

exitLongTrade() =>
    if low <= loss
        strategy.exit("exit", "long",loss=loss)
    if high >= profit
        strategy.exit("exit", "long",profit=profit)

emaBetweenBearishFullRange (idx, ema) =>
    valid = false

    if high >= ema and open[idx] >= ema and low[idx] <= ema and close[idx] <= ema
        valid := true
        
    valid

checkForLongCandidate () =>
    valid = false

    // Is this candle bullish
    if open < close
        // Previous candle must: 
        // 1. be bearish
        // 2. have its body print on the ema50
        if (close[1] < open[1]) and (open[1] >= ema50 and close[1] <= ema50 )
            valid := true

    valid    

checkForLongTrade() =>
    valid = false
    
    if bullish and strategy.position_size == 0    
        // if high >= entry or close >= entry
        valid := true

    valid
    
setupLongOpportunity() => 
    // entry
    e = close   
    // stop loss
    sl = e - atr*2 // 
    // take profit
    tp = e + abs(e - sl)*1.5
    
    [e, sl, tp]
    
startLongTrade() =>
    if showTradeLabels
        drawTradeLabel("Long")
    
    strategy.entry("long", strategy.long, limit=entry, when=time > start and high >= entry)

checkForShortCandidate() =>
    valid = false

    // Is this candle bearish
    if close < open
        // Previous candle must: 
        // 1. be bullish
        // 2. have its body print on the ema50
        if (close[1] > open[1]) and (open[1] <= ema50 and close[1] >= ema50 )
            valid := true

    valid    

checkForShortTrade() =>
    valid = false
    
    if close < open and strategy.position_size == 0    
        // if high >= entry or close >= entry
        valid := true

    valid
    
setupShortOpportunity() => 
    // entry
    e = open[1]   
    // stop loss
    sl = e + atr*2 // 
    // take profit
    tp = e - abs(e - sl)*1.5
    
    [e, sl, tp]

exitShortTrade() =>
    if low <= profit or open <= profit
        strategy.exit("exit", "short", profit=profit)
    if high >= loss or close >= loss
        strategy.exit("exit", "short", loss=loss)

startShortTrade() =>
    // if showTradeLabels
    //     drawTradeLabel("Short")

    strategy.entry("short", false, limit=entry, when=time > start) 
    // strategy.order("short", false, limit=entry, when=time > start) 

sendAlert(dir, e, tp, sl) => 
    alertMsg = dir + " e: " + tostring(e) + ", tp: " + tostring(tp) + ", sl: " + tostring(sl)
    alert(alertMsg, alert.freq_all)

// Run the strategy ============================================================
// Check for golden cross over 50/200
// First make sure the array isn't empty 
// Check to see if the current EMA is still valid. If it has been wicked, its no good.
if strategy.position_size == 0
    if not currentCrossoverDead and (not isLong or not isShort)
        currentCrossoverDead := didWick(ema50)
    
    if currentCrossoverDead and (not isLong or not isShort)
        wickedCount := wickedCount + 1

plotshape(currentCrossoverDead and wickedCount == 1, style=shape.xcross, color=color.red, size=size.large)
    
// Crossover must be valid and we have to have golden crossed over once
if not currentCrossoverDead and array.size(crossType) > 0 
    // Make sure that the current cross type is a cross over (1)
    if array.get(crossType, crossCount - 1) == 1 
        
        // Do we have an existing trade going
        if checkForLongCandidate() and strategy.position_size == 0
            [e, sl, tp] = setupLongOpportunity()
            entry := e
            loss := sl
            profit := tp

            // We found a candidate, so lets invalidate the EMA so we won't register other events
            currentCrossoverDead := true
        
            sendAlert("long", e, tp, sl)
            startLongTrade()
            isLong := true

            drawTradeLines()
            labelUp := not labelUp

// Check for death cross 200/50
// Crossover must be valid and we have to have golden crossed over once
if not currentCrossoverDead and array.size(crossType) > 0 
    // Make sure that the current cross type is a cross over (1)
    if array.get(crossType, crossCount - 1) == 0
        // Do we have an existing trade going
        if checkForShortCandidate() and strategy.position_size == 0
            [e, sl, tp] = setupShortOpportunity()
            entry := e
            loss := sl
            profit := tp

            // We found a candidate, so lets invalidate the EMA so we won't register other events
            currentCrossoverDead := true
            
            sendAlert("short", e, tp, sl)
            startShortTrade()
            isShort := true

            drawTradeLines()
            labelUp := not labelUp

// we are in a long
if isLong and strategy.position_size > 0

    if high >= profit or low <= loss
        // always be ready to exit the long    
        exitLongTrade()
        drawTradeLines()
        isLong := false

// we are in a short
if isShort and strategy.position_size < 0

    if high >= loss or low <= profit
        // always be ready to exit the long    
        exitShortTrade()
        drawTradeLines()
        isShort := false

